[
    {
        "id": "1",
        "title": "Simplest Happy Path Test",
        "description": "Choose the simplest 'Happy Path' case for your first test",
        "url":"https://github.com/redgreengo/Red-Green-Go/wiki/T-1"
    },

    {
        "id": "2",
        "title": "Simplest Next Test",
        "description": "Always aim to write the simplest test you can think of that will fail against the current production code.",
        "url":"https://github.com/redgreengo/Red-Green-Go/wiki/T-2"
    },

    {
        "id": "3",
        "title": "Assertion First",
        "description": "Stuck when writing a test? Try writing the assertion first, and filling in backwards from there..",
        "url":"https://github.com/redgreengo/Red-Green-Go/wiki/T-3"
    },

    {
        "id": "4",
        "title": " Test Case Method Names",
        "description": "A handy trick for naming unit test methods is to start them with the word “should” and follow with a description of the requirement that is being tested.",
        "url":"https://github.com/redgreengo/Red-Green-Go/wiki/T-4"
    },

    {
        "id": "5",
        "title": "Use Boundary Values",
        "description": "Write test cases at the boundaries of the different types of behaviour that you need to support.",
        "url":"https://github.com/redgreengo/Red-Green-Go/wiki/T-5"
    },

    
    {
        "id": "6",
        "title": "Finish Feature Groups",
        "description": "The order in which you tackle the tests is important. Finish all the tests in one feature group before moving on to a new one.",
        "url":"https://github.com/redgreengo/Red-Green-Go/wiki/T-6"
    },

    {
        "id": "7",
        "title": "Sad Path Tests",
        "description": "Write test cases for sad path cases, too. We expect good quality code to deal gracefully with unexpected and invalid cases, too. And, in TDD, that means we must write test cases to cover these requirements.",
        "url":"https://github.com/redgreengo/Red-Green-Go/wiki/T-7"
    }

]